{"version":3,"sources":["speech.js","App.js","index.js"],"names":["voiceCommands","15","nextAthlete","10","5","2","1","0","speakCommand","command","args","text","msg","SpeechSynthesisUtterance","lang","speechSynthesis","speak","DEFAULT_ATHLETES","App","useState","startTime","setStartTime","running","setRunning","timePerAthlete","setTimePerAthlete","speechEnabled","setSpeechEnabled","map","athlete","enabled","athletes","setAthletes","timeUntilNextAthlete","setTimeUntilNextAthlete","currentAthlete","setCurrentAthlete","athletesWithIndex","a","ai","index","slice","filter","requestRef","useRef","prevTimeRef","useEffect","current","requestAnimationFrame","tick","now","secondsSinceStart","Math","round","newTimeUntilNextAthlete","prevSecondsSinceStart","prevTimeUntilNextAthlete","cancelAnimationFrame","Navbar","bg","className","Container","Brand","Jumbotron","ProgressBar","style","transform","background","max","Button","variant","onClick","performance","Card","Body","athleteIndex","Form","Group","as","Row","controlId","Col","sm","InputGroup","Prepend","Text","Control","type","placeholder","value","onChange","e","target","Append","ButtonGroup","toggle","ToggleButton","name","checked","disabled","length","Label","min","Check","label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7d81ded.chunk.js","sourcesContent":["const voiceCommands = {\n  15: ({ nextAthlete }) => `${nextAthlete} bereit machen`,\n  10: () => \"Wechsel in 10\",\n  5: () => \"F√ºnf\",\n  2: () => \"Zwei\",\n  1: () => \"Eins\",\n  0: ({ nextAthlete }) => `Wechsel auf ${nextAthlete}`,\n};\n\nexport function speakCommand(command, args) {\n  if (voiceCommands[command]) {\n    speak(voiceCommands[command](args));\n  }\n}\n\nexport function speak(text) {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = text;\n  msg.lang = \"de-DE\";\n\n  speechSynthesis.speak(msg);\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Container,\n  Form,\n  InputGroup,\n  Jumbotron,\n  Navbar,\n  ProgressBar,\n  Row,\n  ToggleButton,\n  ButtonGroup,\n} from \"react-bootstrap\";\nimport { speakCommand } from \"./speech\";\n\nconst DEFAULT_TIME_PER_ATHLETE = 30;\nconst DEFAULT_ATHLETES = [\n  \"Anton\",\n  \"Berta\",\n  \"C√§sar\",\n  \"Dora\",\n  \"Emil\",\n  \"Friedrich\",\n];\nconst DEFAULT_SPEECH_ENABLED = false;\n\nexport default function App() {\n  const [startTime, setStartTime] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const [timePerAthlete, setTimePerAthlete] = useState(\n    DEFAULT_TIME_PER_ATHLETE\n  );\n  const [speechEnabled, setSpeechEnabled] = useState(DEFAULT_SPEECH_ENABLED);\n  const [athletes, setAthletes] = useState(\n    DEFAULT_ATHLETES.map((athlete) => ({ text: athlete, enabled: true }))\n  );\n\n  const [timeUntilNextAthlete, setTimeUntilNextAthlete] = useState(0);\n  const [currentAthlete, setCurrentAthlete] = useState(0);\n\n  const athletesWithIndex = athletes.map((a, ai) => ({ ...a, index: ai }));\n  const nextAthlete = [\n    ...athletesWithIndex.slice(currentAthlete + 1),\n    ...athletesWithIndex,\n  ].filter((a) => a.enabled)[0].index;\n\n  const requestRef = useRef();\n  const prevTimeRef = useRef();\n\n  useEffect(() => {\n    if (!running) {\n      return;\n    }\n\n    const tick = (now) => {\n      const secondsSinceStart = Math.round((now - startTime) / 1_000);\n      const newTimeUntilNextAthlete =\n        timePerAthlete - (secondsSinceStart % timePerAthlete);\n\n      setTimeUntilNextAthlete(newTimeUntilNextAthlete);\n\n      if (prevTimeRef.current) {\n        const prevSecondsSinceStart = Math.round(\n          (prevTimeRef.current - startTime) / 1_000\n        );\n        const prevTimeUntilNextAthlete =\n          timePerAthlete - (prevSecondsSinceStart % timePerAthlete);\n\n        if (newTimeUntilNextAthlete !== prevTimeUntilNextAthlete) {\n          if (newTimeUntilNextAthlete >= prevTimeUntilNextAthlete) {\n            if (speechEnabled) {\n              speakCommand(0, { nextAthlete: athletes[nextAthlete].text });\n            }\n\n            setCurrentAthlete(nextAthlete);\n          } else if (newTimeUntilNextAthlete > 0) {\n            if (speechEnabled) {\n              speakCommand(newTimeUntilNextAthlete, {\n                nextAthlete: athletes[nextAthlete],\n              });\n            }\n          }\n        }\n      }\n\n      prevTimeRef.current = now;\n      requestRef.current = requestAnimationFrame(tick);\n    };\n\n    requestRef.current = requestAnimationFrame(tick);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [\n    running,\n    speechEnabled,\n    athletes,\n    nextAthlete,\n    timePerAthlete,\n    startTime,\n  ]);\n\n  const handleStart = () => {\n    setStartTime(performance.now());\n    setCurrentAthlete(0);\n    setRunning(true);\n  };\n\n  const handleStop = () => {\n    setRunning(false);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" className=\"mb-2\">\n        <Container>\n          <Navbar.Brand>Team Time Trial Timer</Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <Container>\n        <Jumbotron className=\"mb-2\">\n          {running && (\n            <>\n              <h1 className=\"text-center display-2\">\n                {athletes[currentAthlete].text}\n              </h1>\n\n              <h2 className=\"text-center display-5\">\n                üîú {athletes[nextAthlete].text}\n              </h2>\n\n              <h3 className=\"text-center display-6\">\n                ‚è±Ô∏è {timeUntilNextAthlete}s\n              </h3>\n              <ProgressBar\n                style={{ transform: \"scaleX(-1)\", background: \"white\" }}\n                now={timeUntilNextAthlete}\n                max={timePerAthlete}\n              />\n            </>\n          )}\n\n          <div className=\"mt-4 text-center\">\n            {running ? (\n              <Button variant=\"secondary\" onClick={handleStop}>\n                Stop\n              </Button>\n            ) : (\n              <Button variant=\"primary\" onClick={handleStart}>\n                Start\n              </Button>\n            )}\n          </div>\n        </Jumbotron>\n\n        <Card>\n          <Card.Body>\n            <h3>Sportler</h3>\n\n            {athletes.map((athlete, athleteIndex) => (\n              <Form.Group\n                key={athleteIndex}\n                as={Row}\n                controlId={`athlete-${athleteIndex}`}\n              >\n                <Col sm={12}>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>#{athleteIndex + 1}</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder={`Athlete ${athleteIndex + 1}`}\n                      value={athlete.text}\n                      onChange={(e) =>\n                        setAthletes(\n                          athletes.map((a, ai) =>\n                            ai === athleteIndex\n                              ? { ...a, text: e.target.value }\n                              : a\n                          )\n                        )\n                      }\n                    />\n                    <InputGroup.Append>\n                      <ButtonGroup toggle>\n                        <ToggleButton\n                          variant=\"outline-secondary\"\n                          type=\"checkbox\"\n                          name={`athlete-${athleteIndex}-enabled`}\n                          checked={!athlete.enabled}\n                          disabled={\n                            athlete.enabled &&\n                            athletes.filter((a) => a.enabled).length === 1\n                          }\n                          onChange={(e) =>\n                            setAthletes(\n                              athletes.map((a, ai) =>\n                                ai === athleteIndex\n                                  ? { ...a, enabled: !e.target.checked }\n                                  : a\n                              )\n                            )\n                          }\n                        >\n                          ‚ò†Ô∏è\n                        </ToggleButton>\n                      </ButtonGroup>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Form.Group>\n            ))}\n\n            <h3>Einstellungen</h3>\n            <Form.Group controlId=\"timePerAthlete\">\n              <Form.Label>Interval (in Sekunden)</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={timePerAthlete}\n                onChange={(e) => setTimePerAthlete(+e.target.value)}\n                disabled={running}\n                min={20}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"speechEnabled\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Sprachausgabe\"\n                checked={speechEnabled}\n                onChange={(e) => setSpeechEnabled(e.target.checked)}\n              />\n            </Form.Group>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}