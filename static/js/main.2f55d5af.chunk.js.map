{"version":3,"sources":["speech.js","App.js","index.js"],"names":["voiceCommands","start","15","nextAthlete","10","5","2","1","0","speakCommand","command","args","text","msg","SpeechSynthesisUtterance","lang","speechSynthesis","speak","DEFAULT_ATHLETES","App","useState","startTime","setStartTime","running","setRunning","startDelay","setStartDelay","timePerAthlete","setTimePerAthlete","speechEnabled","setSpeechEnabled","map","athlete","enabled","athletes","setAthletes","timeUntilNextChange","setTimeUntilNextChange","undefined","currentAthlete","setCurrentAthlete","useMemo","athletesWithIndex","a","ai","index","find","slice","filter","prevTimeRef","useRef","useInterval","changeTime","now","Date","secondsSinceStart","toSeconds","prevSecondsSinceStart","current","Math","max","Navbar","bg","className","Container","Brand","Jumbotron","ProgressBar","style","transform","background","Button","variant","onClick","Card","Body","athleteIndex","Form","Group","as","Row","controlId","Col","sm","InputGroup","Prepend","Text","Control","type","placeholder","value","onChange","e","target","Append","ButtonGroup","toggle","ToggleButton","name","checked","disabled","length","Label","min","Check","label","ms","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f55d5af.chunk.js","sourcesContent":["const voiceCommands = {\n  start: () => \"Start\",\n  15: ({ nextAthlete }) => `${nextAthlete}. Get ready.`,\n  10: () => \"Change in 10\",\n  5: () => \"Five\",\n  2: () => \"Two\",\n  1: () => \"One\",\n  0: ({ nextAthlete }) => `Change to ${nextAthlete}`,\n};\n\nexport function speakCommand(command, args) {\n  if (voiceCommands[command]) {\n    speak(voiceCommands[command](args));\n  }\n}\n\nexport function speak(text) {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = text;\n  msg.lang = \"en-US\";\n\n  speechSynthesis.speak(msg);\n}\n","import useInterval from \"@use-it/interval\";\nimport { useMemo, useRef, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  Col,\n  Container,\n  Form,\n  InputGroup,\n  Jumbotron,\n  Navbar,\n  ProgressBar,\n  Row,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { speakCommand } from \"./speech\";\n\nconst DEFAULT_START_DELAY = 0;\nconst DEFAULT_TIME_PER_ATHLETE = 30;\nconst DEFAULT_ATHLETES = [\n  \"Anton\",\n  \"Berta\",\n  \"C√§sar\",\n  \"Dora\",\n  \"Emil\",\n  \"Friedrich\",\n];\nconst DEFAULT_SPEECH_ENABLED = false;\n\nexport default function App() {\n  const [startTime, setStartTime] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const [startDelay, setStartDelay] = useState(DEFAULT_START_DELAY);\n\n  const [timePerAthlete, setTimePerAthlete] = useState(\n    DEFAULT_TIME_PER_ATHLETE\n  );\n  const [speechEnabled, setSpeechEnabled] = useState(DEFAULT_SPEECH_ENABLED);\n  const [athletes, setAthletes] = useState(\n    DEFAULT_ATHLETES.map((athlete) => ({ text: athlete, enabled: true }))\n  );\n\n  const [timeUntilNextChange, setTimeUntilNextChange] = useState(0);\n  const [currentAthlete, setCurrentAthlete] = useState(undefined);\n\n  const nextAthlete = useMemo(() => {\n    const athletesWithIndex = athletes.map((a, ai) => ({ ...a, index: ai }));\n\n    if (currentAthlete === undefined) {\n      return athletesWithIndex.find((a) => a.enabled).index;\n    }\n\n    return [\n      ...athletesWithIndex.slice(currentAthlete + 1),\n      ...athletesWithIndex,\n    ].filter((a) => a.enabled)[0].index;\n  }, [currentAthlete, athletes]);\n\n  const prevTimeRef = useRef();\n\n  useInterval(() => {\n    if (!running) {\n      return;\n    }\n\n    const changeTime =\n      currentAthlete === undefined ? startDelay : timePerAthlete;\n\n    const now = Date.now();\n\n    const secondsSinceStart = toSeconds(now - startTime);\n    const prevSecondsSinceStart = toSeconds(prevTimeRef.current - startTime);\n\n    setTimeUntilNextChange(Math.max(changeTime - secondsSinceStart, 0));\n\n    if (secondsSinceStart !== prevSecondsSinceStart) {\n      if (secondsSinceStart >= changeTime) {\n        if (speechEnabled) {\n          if (currentAthlete === undefined) {\n            speakCommand(\"start\");\n          } else {\n            speakCommand(0, { nextAthlete: athletes[nextAthlete].text });\n          }\n        }\n\n        setCurrentAthlete(nextAthlete);\n        setStartTime(now);\n      } else {\n        if (speechEnabled) {\n          speakCommand(changeTime - secondsSinceStart, {\n            nextAthlete: athletes[nextAthlete].text,\n          });\n        }\n      }\n    }\n\n    prevTimeRef.current = now;\n  }, 500);\n\n  const handleStart = () => {\n    const now = Date.now();\n    setStartTime(now);\n    prevTimeRef.current = now;\n    setTimeUntilNextChange(startDelay > 0 ? startDelay : timePerAthlete);\n    setCurrentAthlete(startDelay > 0 ? undefined : 0);\n\n    setRunning(true);\n  };\n\n  const handleStop = () => {\n    setRunning(false);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" className=\"mb-2\">\n        <Container>\n          <Navbar.Brand>Team Time Trial Timer</Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <Container>\n        <Jumbotron className=\"mb-2\">\n          {running && (\n            <>\n              <h1 className=\"text-center display-2\">\n                {currentAthlete === undefined\n                  ? \"Wait\"\n                  : athletes[currentAthlete].text}\n              </h1>\n\n              <h2 className=\"text-center display-5\">\n                üîú {athletes[nextAthlete].text}\n              </h2>\n\n              <h3 className=\"text-center display-6\">\n                ‚è±Ô∏è {timeUntilNextChange}s\n              </h3>\n              <ProgressBar\n                style={{ transform: \"scaleX(-1)\", background: \"white\" }}\n                now={timeUntilNextChange}\n                max={currentAthlete === undefined ? startDelay : timePerAthlete}\n              />\n            </>\n          )}\n\n          <div className=\"mt-4 text-center\">\n            {running ? (\n              <Button variant=\"danger\" onClick={handleStop}>\n                Stop\n              </Button>\n            ) : (\n              <Button variant=\"primary\" onClick={handleStart}>\n                Start\n              </Button>\n            )}\n          </div>\n        </Jumbotron>\n\n        <Card>\n          <Card.Body>\n            <h3>Athletes</h3>\n\n            {athletes.map((athlete, athleteIndex) => (\n              <Form.Group\n                key={athleteIndex}\n                as={Row}\n                controlId={`athlete-${athleteIndex}`}\n              >\n                <Col sm={12}>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>#{athleteIndex + 1}</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder={`Athlete ${athleteIndex + 1}`}\n                      value={athlete.text}\n                      onChange={(e) =>\n                        setAthletes(\n                          athletes.map((a, ai) =>\n                            ai === athleteIndex\n                              ? { ...a, text: e.target.value }\n                              : a\n                          )\n                        )\n                      }\n                    />\n                    <InputGroup.Append>\n                      <ButtonGroup toggle>\n                        <ToggleButton\n                          variant=\"outline-secondary\"\n                          type=\"checkbox\"\n                          name={`athlete-${athleteIndex}-enabled`}\n                          checked={!athlete.enabled}\n                          disabled={\n                            athlete.enabled &&\n                            athletes.filter((a) => a.enabled).length === 1\n                          }\n                          onChange={(e) =>\n                            setAthletes(\n                              athletes.map((a, ai) =>\n                                ai === athleteIndex\n                                  ? { ...a, enabled: !e.target.checked }\n                                  : a\n                              )\n                            )\n                          }\n                        >\n                          ‚ò†Ô∏è\n                        </ToggleButton>\n                      </ButtonGroup>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Form.Group>\n            ))}\n\n            <h3>Settings</h3>\n            <Form.Group controlId=\"startDelay\">\n              <Form.Label>Start Delay (in seconds)</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={startDelay}\n                onChange={(e) => setStartDelay(+e.target.value)}\n                disabled={running}\n                min={0}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"timePerAthlete\">\n              <Form.Label>Interval (in seconds)</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={timePerAthlete}\n                onChange={(e) => setTimePerAthlete(+e.target.value)}\n                disabled={running}\n                min={20}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"speechEnabled\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Voice Output\"\n                checked={speechEnabled}\n                onChange={(e) => setSpeechEnabled(e.target.checked)}\n              />\n            </Form.Group>\n          </Card.Body>\n        </Card>\n      </Container>\n    </>\n  );\n}\n\nfunction toSeconds(ms) {\n  return Math.round(ms / 1_000);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}