{"version":3,"sources":["config.js","speech.js","App.js","useVoices.js","index.js"],"names":["LOCAL_STORAGE_KEY","DEFAULT_ATHLETES","map","athleteName","text","enabled","time","voiceCommands","voiceChanged","start","15","nextAthlete","10","5","2","1","0","speakCommand","command","args","voice","msg","SpeechSynthesisUtterance","lang","window","speechSynthesis","cancel","speak","initialConfig","rawConfig","localStorage","getItem","config","JSON","parse","athletes","speechEnabled","startDelay","loadConfig","App","useState","startTime","setStartTime","running","setRunning","setStartDelay","setSpeechEnabled","setAthletes","voices","setVoices","updateVoices","getVoices","useEffect","onvoiceschanged","undefined","filter","startsWith","useVoices","voiceURI","setVoiceURI","find","v","timeUntilNextChange","setTimeUntilNextChange","currentAthlete","setCurrentAthlete","currentAthleteName","setItem","stringify","useMemo","athletesWithIndex","a","ai","index","slice","nextAthleteName","prevTimeRef","useRef","useInterval","changeTime","now","Date","secondsSinceStart","toSeconds","prevSecondsSinceStart","current","Math","max","Navbar","bg","className","Container","Brand","Jumbotron","ProgressBar","style","transform","background","Button","variant","onClick","size","Card","Body","athlete","athleteIndex","Form","Group","as","Row","controlId","Col","sm","InputGroup","Control","type","placeholder","value","onChange","e","target","Append","ButtonGroup","toggle","ToggleButton","name","checked","disabled","length","Label","min","Check","label","newVoiceURI","Text","padding","fontSize","border","location","reload","href","rel","ms","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAAMA,EAAoB,SAcpBC,EAVwB,CAC5B,SACA,QACA,OACA,MACA,OACA,QAI6CC,KAAI,SAACC,GAAD,MAAkB,CACnEC,KAAMD,EACNE,SAAS,EACTC,KAd+B,OCHjC,IAAMC,EAAgB,CACpBC,aAAc,iBAAM,cACpBC,MAAO,iBAAM,SACbC,GAAI,gBAAGC,EAAH,EAAGA,YAAH,gBAAwBA,EAAxB,iBACJC,GAAI,iBAAM,gBACVC,EAAG,iBAAM,QACTC,EAAG,iBAAM,OACTC,EAAG,iBAAM,OACTC,EAAG,gBAAGL,EAAH,EAAGA,YAAH,0BAAkCA,KAGhC,SAASM,EAAaC,EAASC,EAAMC,GACtCb,EAAcW,IAKb,SAAed,EAAMgB,GAC1B,IAAMC,EAAM,IAAIC,yBAChBD,EAAIjB,KAAOA,EACXiB,EAAIE,KAAO,QACXF,EAAID,MAAQA,EAEZI,OAAOC,gBAAgBC,SACvBF,OAAOC,gBAAgBE,MAAMN,GAX3BM,CAAMpB,EAAcW,GAASC,GAAOC,GCOxC,IAAMQ,EFAC,WACL,IACE,IAAMC,EAAYC,aAAaC,QAAQ/B,GACjCgC,EAASC,KAAKC,MAAML,GAE1B,MAAO,CACLM,SAAUH,EAAOG,UAAYlC,EAC7BmC,cAAeJ,EAAOI,cACtBC,WAAYL,EAAOK,WACnBjB,MAAOY,EAAOZ,OAEhB,SACA,MAAO,CACLe,SAAUlC,EACVmC,cAtByB,MAuBzBC,WAjCsB,IEkBNC,GAEP,SAASC,IAAO,IAAD,EACMC,mBAAS,GADf,mBACrBC,EADqB,KACVC,EADU,OAEEF,oBAAS,GAFX,mBAErBG,EAFqB,KAEZC,EAFY,OAIQJ,mBAASZ,EAAcS,YAJ/B,mBAIrBA,EAJqB,KAITQ,EAJS,OAKcL,mBACxCZ,EAAcQ,eANY,mBAKrBA,EALqB,KAKNU,EALM,OAQIN,mBAASZ,EAAcO,UAR3B,mBAQrBA,EARqB,KAQXY,EARW,KAUtBC,EC9BD,WAAsB,IAAD,EACER,mBAAS,IADX,mBACnBQ,EADmB,KACXC,EADW,KAGpBC,EAAe,WACnBD,EAAUzB,OAAOC,gBAAgB0B,cAanC,OAVAC,qBAAU,WACR,GAAsC,qBAA3B5B,OAAOC,gBAMlB,OAFAyB,IACA1B,OAAOC,gBAAgB4B,gBAAkBH,EAClC,kBAAO1B,OAAOC,gBAAgB4B,qBAAkBC,KACtD,IAEIN,EAAOO,QAAO,SAACnC,GAAD,OAAWA,EAAMG,KAAKiC,WAAW,UDavCC,GAVa,EAWIjB,mBAASZ,EAAcR,OAX3B,mBAWrBsC,EAXqB,KAWXC,EAXW,KAYtBvC,EAAQ4B,EAAOY,MAAK,SAACC,GAAD,OAAOA,EAAEH,WAAaA,KAZpB,EAc0BlB,mBAAS,GAdnC,mBAcrBsB,EAdqB,KAcAC,EAdA,OAegBvB,wBAASc,GAfzB,mBAerBU,GAfqB,KAeLC,GAfK,KAgBtBC,QACeZ,IAAnBU,GACI7B,EAAS6B,IAAgB5D,MAAzB,kBAA4C4D,GAAiB,GAC7D,GAENZ,qBAAU,WFHL,IAAoBpB,IEIZ,CAAEG,WAAUE,aAAYD,gBAAehB,MAAOsC,GFH3D5B,aAAaqC,QAAQnE,EAAmBiC,KAAKmC,UAAUpC,MEIpD,CAACG,EAAUE,EAAYD,EAAesB,IAEzC,IAAM/C,GAAc0D,mBAAQ,WAC1B,IAAMC,EAAoBnC,EAASjC,KAAI,SAACqE,EAAGC,GAAJ,mBAAC,eAAgBD,GAAjB,IAAoBE,MAAOD,OAElE,YAAuBlB,IAAnBU,GACKM,EAAkBV,MAAK,SAACW,GAAD,OAAOA,EAAElE,WAASoE,MAG3C,sBACFH,EAAkBI,MAAMV,GAAiB,IADvC,YAEFM,IACHf,QAAO,SAACgB,GAAD,OAAOA,EAAElE,WAAS,GAAGoE,QAC7B,CAACT,GAAgB7B,IACdwC,GACJxC,EAASxB,IAAaP,MAAtB,kBAAyCO,GAAc,GAEnDiE,GAAcC,mBAEdlD,GAAQ,SAACT,GACRkB,GAGLnB,EAAaC,EAAS,CAAEP,YAAagE,IAAmBvD,IAG1D0D,KAAY,WACV,GAAKnC,EAAL,CAIA,IAAMoC,OACezB,IAAnBU,GAA+B3B,EAAaF,EAAS6B,IAAgB1D,KAEjE0E,EAAMC,KAAKD,MAEXE,EAAoBC,EAAUH,EAAMvC,GACpC2C,EAAwBD,EAAUP,GAAYS,QAAU5C,GAE9DsB,EAAuBuB,KAAKC,IAAIR,EAAaG,EAAmB,IAE5DA,IAAsBE,IACpBF,GAAqBH,GACnB3C,GAEAT,QADqB2B,IAAnBU,GACI,QAEA,GAIVC,GAAkBtD,IAClB+B,EAAasC,IAET5C,GACFT,GAAMoD,EAAaG,IAKzBN,GAAYS,QAAUL,KACrB,KA2BH,OACE,qCACE,cAACQ,EAAA,EAAD,CAAQC,GAAG,QAAQC,UAAU,OAA7B,SACE,cAACC,EAAA,EAAD,UACE,cAACH,EAAA,EAAOI,MAAR,wCAIJ,eAACD,EAAA,EAAD,WACE,eAACE,EAAA,EAAD,CAAWH,UAAU,OAArB,UACG/C,GACC,qCACE,oBAAI+C,UAAU,wBAAd,cACsBpC,IAAnBU,GAA+B,OAASE,KAG3C,qBAAIwB,UAAU,wBAAd,0BAA0Cf,MAE1C,qBAAIe,UAAU,wBAAd,0BACM5B,EADN,OAGA,cAACgC,EAAA,EAAD,CACEC,MAAO,CAAEC,UAAW,aAAcC,WAAY,SAC9CjB,IAAKlB,EACLyB,SACqBjC,IAAnBU,GACI3B,EACAF,EAAS6B,IAAgB1D,UAMrC,qBAAKoF,UAAU,mBAAf,SACG/C,EACC,cAACuD,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAlDlB,WACjBxD,GAAW,IAiDD,kBAIA,cAACsD,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAhElB,WAClB,IAAMpB,EAAMC,KAAKD,MACjBtC,EAAasC,GACbJ,GAAYS,QAAUL,EACtBjB,EAAuB1B,EAAa,EAAIA,EAAaF,EAAS,GAAG7B,MACjE2D,GAAkB5B,EAAa,OAAIiB,EAAY3C,IAE/CiC,GAAW,IAyD+CyD,KAAK,KAArD,wBAON,cAACC,EAAA,EAAD,CAAMZ,UAAU,OAAhB,SACE,eAACY,EAAA,EAAKC,KAAN,WACE,0CAECpE,EAASjC,KAAI,SAACsG,EAASC,GAAV,OACZ,cAACC,EAAA,EAAKC,MAAN,CAEEC,GAAIC,IACJC,UAAS,kBAAaL,GAHxB,SAKE,cAACM,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACC,EAAA,EAAD,WACE,cAACP,EAAA,EAAKQ,QAAN,CACEnB,MAAO,CAAEE,YAAaO,EAAQnG,SAAW,aACzC8G,KAAK,OACLC,YAAW,OACXC,MAAOb,EAAQpG,KACfkH,SAAU,SAACC,GAAD,OACRxE,EACEZ,EAASjC,KAAI,SAACqE,EAAGC,GAAJ,OACXA,IAAOiC,EAAP,2BACSlC,GADT,IACYnE,KAAMmH,EAAEC,OAAOH,QACvB9C,SAKZ,cAACmC,EAAA,EAAKQ,QAAN,CACEnB,MAAO,CAAEE,YAAaO,EAAQnG,SAAW,aACzC8G,KAAK,SACLC,YAAW,oBACXC,MAAOb,EAAQlG,KACfgH,SAAU,SAACC,GAAD,OACRxE,EACEZ,EAASjC,KAAI,SAACqE,EAAGC,GAAJ,OACXA,IAAOiC,EAAP,2BACSlC,GADT,IACYjE,MAAOiH,EAAEC,OAAOH,QACxB9C,SAKZ,cAAC0C,EAAA,EAAWQ,OAAZ,UACE,cAACC,EAAA,EAAD,CAAaC,QAAM,EAAnB,SACE,cAACC,EAAA,EAAD,CACEzB,QAAQ,oBACRgB,KAAK,WACLU,KAAI,kBAAapB,EAAb,YACJqB,SAAUtB,EAAQnG,QAClB0H,SACEvB,EAAQnG,SACqC,IAA7C8B,EAASoB,QAAO,SAACgB,GAAD,OAAOA,EAAElE,WAAS2H,OAEpCV,SAAU,SAACC,GAAD,OACRxE,EACEZ,EAASjC,KAAI,SAACqE,EAAGC,GAAJ,OACXA,IAAOiC,EAAP,2BACSlC,GADT,IACYlE,SAAUkH,EAAEC,OAAOM,UAC3BvD,OAdZ,oCAtCHkC,MAkET,0CACA,eAACC,EAAA,EAAKC,MAAN,CAAYG,UAAU,aAAtB,UACE,cAACJ,EAAA,EAAKuB,MAAN,uCACA,cAACvB,EAAA,EAAKQ,QAAN,CACEC,KAAK,SACLE,MAAOhF,EACPiF,SAAU,SAACC,GAAD,OAAO1E,GAAe0E,EAAEC,OAAOH,QACzCU,SAAUpF,EACVuF,IAAK,OAGT,cAACxB,EAAA,EAAKC,MAAN,CAAYG,UAAU,gBAAtB,SACE,cAACJ,EAAA,EAAKyB,MAAN,CACEhB,KAAK,WACLiB,MAAM,eACNN,QAAS1F,EACTkF,SAAU,SAACC,GAAD,OAAOzE,EAAiByE,EAAEC,OAAOM,cAG/C,eAACpB,EAAA,EAAKC,MAAN,CAAYG,UAAU,QAAtB,UACE,cAACJ,EAAA,EAAKuB,MAAN,oBACA,cAACvB,EAAA,EAAKQ,QAAN,CACEN,GAAG,SACHU,SAAU,SAACC,GAAD,OAxJGc,EAwJsBd,EAAEC,OAAOH,MAvJxD1D,EAAY0E,QAGZpH,EACE,eACA,GACA+B,EAAOY,MAAK,SAACC,GAAD,OAAOA,EAAEH,WAAa2E,MAPZ,IAACA,GAyJbhB,MAAO3D,EACPqE,SAA4B,IAAlB/E,EAAOgF,OAJnB,SAMGhF,EAAOgF,OAAS,EACfhF,EAAO9C,KAAI,SAACkB,GAAD,OACT,wBAA6BiG,MAAOjG,EAAMsC,SAA1C,SACGtC,EAAMyG,MADIzG,EAAMsC,aAKrB,4CAAY,aAGhB,eAACgD,EAAA,EAAK4B,KAAN,8DACmD,IACjD,cAACpC,EAAA,EAAD,CACEH,MAAO,CACLwC,QAAS,EACTC,SAAU,OACVC,OAAQ,QAEVtC,QAAQ,OACRC,QAAS,WACPzC,OAAYL,GACZ9B,OAAOkH,SAASC,UATpB,kBAaU,IAfZ,0DAsBN,yBAAQjD,UAAU,kBAAlB,UACE,mBACEkD,KAAK,uCACLC,IAAI,sBACJrB,OAAO,SAHT,oBAMK,IAPP,yBAQoB,IAClB,mBACEoB,KAAK,0BACLC,IAAI,sBACJrB,OAAO,SAHT,kBAMK,IAfP,KAgBK,IACH,mBACEoB,KAAK,+CACLC,IAAI,sBACJrB,OAAO,SAHT,sCAaV,SAASrC,EAAU2D,GACjB,OAAOxD,KAAKyD,MAAMD,EAAK,K,MEhVzBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3G,EAAD,MAEF4G,SAASC,eAAe,W","file":"static/js/main.a3f1c517.chunk.js","sourcesContent":["const LOCAL_STORAGE_KEY = \"config\";\n\nconst DEFAULT_START_DELAY = 0;\nconst DEFAULT_TIME_PER_ATHLETE = 30;\nconst DEFAULT_ATHLETE_NAMES = [\n  \"Amelia\",\n  \"Bowie\",\n  \"Coco\",\n  \"Dan\",\n  \"Emma\",\n  \"Finn\",\n];\nconst DEFAULT_SPEECH_ENABLED = false;\n\nconst DEFAULT_ATHLETES = DEFAULT_ATHLETE_NAMES.map((athleteName) => ({\n  text: athleteName,\n  enabled: true,\n  time: DEFAULT_TIME_PER_ATHLETE,\n}));\n\nexport function loadConfig() {\n  try {\n    const rawConfig = localStorage.getItem(LOCAL_STORAGE_KEY);\n    const config = JSON.parse(rawConfig);\n\n    return {\n      athletes: config.athletes || DEFAULT_ATHLETES,\n      speechEnabled: config.speechEnabled,\n      startDelay: config.startDelay,\n      voice: config.voice,\n    };\n  } catch {\n    return {\n      athletes: DEFAULT_ATHLETES,\n      speechEnabled: DEFAULT_SPEECH_ENABLED,\n      startDelay: DEFAULT_START_DELAY,\n    };\n  }\n}\n\nexport function saveConfig(config) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(config));\n}\n","const voiceCommands = {\n  voiceChanged: () => \"Go faster!\",\n  start: () => \"Start\",\n  15: ({ nextAthlete }) => `${nextAthlete}. Get ready.`,\n  10: () => \"Change in 10\",\n  5: () => \"Five\",\n  2: () => \"Two\",\n  1: () => \"One\",\n  0: ({ nextAthlete }) => `Change to ${nextAthlete}`,\n};\n\nexport function speakCommand(command, args, voice) {\n  if (voiceCommands[command]) {\n    speak(voiceCommands[command](args), voice);\n  }\n}\n\nexport function speak(text, voice) {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = text;\n  msg.lang = \"en-US\";\n  msg.voice = voice;\n\n  window.speechSynthesis.cancel();\n  window.speechSynthesis.speak(msg);\n}\n","import useInterval from \"@use-it/interval\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  Col,\n  Container,\n  Form,\n  InputGroup,\n  Jumbotron,\n  Navbar,\n  ProgressBar,\n  Row,\n  ToggleButton\n} from \"react-bootstrap\";\nimport { loadConfig, saveConfig } from \"./config\";\nimport { speakCommand } from \"./speech\";\nimport { useVoices } from \"./useVoices\";\n\nconst initialConfig = loadConfig();\n\nexport default function App() {\n  const [startTime, setStartTime] = useState(0);\n  const [running, setRunning] = useState(false);\n\n  const [startDelay, setStartDelay] = useState(initialConfig.startDelay);\n  const [speechEnabled, setSpeechEnabled] = useState(\n    initialConfig.speechEnabled\n  );\n  const [athletes, setAthletes] = useState(initialConfig.athletes);\n\n  const voices = useVoices();\n  const [voiceURI, setVoiceURI] = useState(initialConfig.voice);\n  const voice = voices.find((v) => v.voiceURI === voiceURI);\n\n  const [timeUntilNextChange, setTimeUntilNextChange] = useState(0);\n  const [currentAthlete, setCurrentAthlete] = useState(undefined);\n  const currentAthleteName =\n    currentAthlete !== undefined\n      ? athletes[currentAthlete].text || `Athlete ${currentAthlete + 1}`\n      : \"\";\n\n  useEffect(() => {\n    saveConfig({ athletes, startDelay, speechEnabled, voice: voiceURI });\n  }, [athletes, startDelay, speechEnabled, voiceURI]);\n\n  const nextAthlete = useMemo(() => {\n    const athletesWithIndex = athletes.map((a, ai) => ({ ...a, index: ai }));\n\n    if (currentAthlete === undefined) {\n      return athletesWithIndex.find((a) => a.enabled).index;\n    }\n\n    return [\n      ...athletesWithIndex.slice(currentAthlete + 1),\n      ...athletesWithIndex,\n    ].filter((a) => a.enabled)[0].index;\n  }, [currentAthlete, athletes]);\n  const nextAthleteName =\n    athletes[nextAthlete].text || `Athlete ${nextAthlete + 1}`;\n\n  const prevTimeRef = useRef();\n\n  const speak = (command) => {\n    if (!speechEnabled) {\n      return;\n    }\n    speakCommand(command, { nextAthlete: nextAthleteName }, voice);\n  };\n\n  useInterval(() => {\n    if (!running) {\n      return;\n    }\n\n    const changeTime =\n      currentAthlete === undefined ? startDelay : athletes[currentAthlete].time;\n\n    const now = Date.now();\n\n    const secondsSinceStart = toSeconds(now - startTime);\n    const prevSecondsSinceStart = toSeconds(prevTimeRef.current - startTime);\n\n    setTimeUntilNextChange(Math.max(changeTime - secondsSinceStart, 0));\n\n    if (secondsSinceStart !== prevSecondsSinceStart) {\n      if (secondsSinceStart >= changeTime) {\n        if (speechEnabled) {\n          if (currentAthlete === undefined) {\n            speak(\"start\");\n          } else {\n            speak(0);\n          }\n        }\n\n        setCurrentAthlete(nextAthlete);\n        setStartTime(now);\n      } else {\n        if (speechEnabled) {\n          speak(changeTime - secondsSinceStart);\n        }\n      }\n    }\n\n    prevTimeRef.current = now;\n  }, 500);\n\n  const handleStart = () => {\n    const now = Date.now();\n    setStartTime(now);\n    prevTimeRef.current = now;\n    setTimeUntilNextChange(startDelay > 0 ? startDelay : athletes[0].time);\n    setCurrentAthlete(startDelay > 0 ? undefined : nextAthlete);\n\n    setRunning(true);\n  };\n\n  const handleStop = () => {\n    setRunning(false);\n  };\n\n  const handleVoiceChange = (newVoiceURI) => {\n    setVoiceURI(newVoiceURI);\n\n    // do not use `speak` here as it would use the old voice state\n    speakCommand(\n      \"voiceChanged\",\n      {},\n      voices.find((v) => v.voiceURI === newVoiceURI)\n    );\n  };\n\n  return (\n    <>\n      <Navbar bg=\"light\" className=\"mb-2\">\n        <Container>\n          <Navbar.Brand>Team Time Trial Timer</Navbar.Brand>\n        </Container>\n      </Navbar>\n\n      <Container>\n        <Jumbotron className=\"mb-2\">\n          {running && (\n            <>\n              <h1 className=\"text-center display-2\">\n                {currentAthlete === undefined ? \"Wait\" : currentAthleteName}\n              </h1>\n\n              <h2 className=\"text-center display-5\">🔜 {nextAthleteName}</h2>\n\n              <h3 className=\"text-center display-6\">\n                ⏱️ {timeUntilNextChange}s\n              </h3>\n              <ProgressBar\n                style={{ transform: \"scaleX(-1)\", background: \"white\" }}\n                now={timeUntilNextChange}\n                max={\n                  currentAthlete === undefined\n                    ? startDelay\n                    : athletes[currentAthlete].time\n                }\n              />\n            </>\n          )}\n\n          <div className=\"mt-4 text-center\">\n            {running ? (\n              <Button variant=\"danger\" onClick={handleStop}>\n                Stop\n              </Button>\n            ) : (\n              <Button variant=\"primary\" onClick={handleStart} size=\"lg\">\n                Start\n              </Button>\n            )}\n          </div>\n        </Jumbotron>\n\n        <Card className=\"mb-2\">\n          <Card.Body>\n            <h3>Athletes</h3>\n\n            {athletes.map((athlete, athleteIndex) => (\n              <Form.Group\n                key={athleteIndex}\n                as={Row}\n                controlId={`athlete-${athleteIndex}`}\n              >\n                <Col sm={12}>\n                  <InputGroup>\n                    <Form.Control\n                      style={{ background: !athlete.enabled && \"#6c757d80\" }}\n                      type=\"text\"\n                      placeholder={`Name`}\n                      value={athlete.text}\n                      onChange={(e) =>\n                        setAthletes(\n                          athletes.map((a, ai) =>\n                            ai === athleteIndex\n                              ? { ...a, text: e.target.value }\n                              : a\n                          )\n                        )\n                      }\n                    />\n                    <Form.Control\n                      style={{ background: !athlete.enabled && \"#6c757d80\" }}\n                      type=\"number\"\n                      placeholder={`Time (in seconds)`}\n                      value={athlete.time}\n                      onChange={(e) =>\n                        setAthletes(\n                          athletes.map((a, ai) =>\n                            ai === athleteIndex\n                              ? { ...a, time: +e.target.value }\n                              : a\n                          )\n                        )\n                      }\n                    />\n                    <InputGroup.Append>\n                      <ButtonGroup toggle>\n                        <ToggleButton\n                          variant=\"outline-secondary\"\n                          type=\"checkbox\"\n                          name={`athlete-${athleteIndex}-enabled`}\n                          checked={!athlete.enabled}\n                          disabled={\n                            athlete.enabled &&\n                            athletes.filter((a) => a.enabled).length === 1\n                          }\n                          onChange={(e) =>\n                            setAthletes(\n                              athletes.map((a, ai) =>\n                                ai === athleteIndex\n                                  ? { ...a, enabled: !e.target.checked }\n                                  : a\n                              )\n                            )\n                          }\n                        >\n                          ☠️\n                        </ToggleButton>\n                      </ButtonGroup>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Form.Group>\n            ))}\n\n            <h3>Settings</h3>\n            <Form.Group controlId=\"startDelay\">\n              <Form.Label>Start Delay (in seconds)</Form.Label>\n              <Form.Control\n                type=\"number\"\n                value={startDelay}\n                onChange={(e) => setStartDelay(+e.target.value)}\n                disabled={running}\n                min={0}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"speechEnabled\">\n              <Form.Check\n                type=\"checkbox\"\n                label=\"Voice Output\"\n                checked={speechEnabled}\n                onChange={(e) => setSpeechEnabled(e.target.checked)}\n              />\n            </Form.Group>\n            <Form.Group controlId=\"voice\">\n              <Form.Label>Voice</Form.Label>\n              <Form.Control\n                as=\"select\"\n                onChange={(e) => handleVoiceChange(e.target.value)}\n                value={voiceURI}\n                disabled={voices.length === 0}\n              >\n                {voices.length > 0 ? (\n                  voices.map((voice) => (\n                    <option key={voice.voiceURI} value={voice.voiceURI}>\n                      {voice.name}\n                    </option>\n                  ))\n                ) : (\n                  <option key=\"default\">Default</option>\n                )}\n              </Form.Control>\n              <Form.Text>\n                If the voice output does not work anymore, click{\" \"}\n                <Button\n                  style={{\n                    padding: 0,\n                    fontSize: \"100%\",\n                    border: \"none\",\n                  }}\n                  variant=\"link\"\n                  onClick={() => {\n                    setVoiceURI(undefined);\n                    window.location.reload();\n                  }}\n                >\n                  here\n                </Button>{\" \"}\n                to reset the app and keep the default voice.\n              </Form.Text>\n            </Form.Group>\n          </Card.Body>\n        </Card>\n\n        <footer className=\"text-muted mb-2\">\n          <a\n            href=\"https://github.com/andipaetzold/tttt\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            GitHub\n          </a>{\" \"}\n          | Made with ♥ for{\" \"}\n          <a\n            href=\"https://www.wtrl.racing\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            WTRL\n          </a>{\" \"}\n          by{\" \"}\n          <a\n            href=\"https://zwiftpower.com/profile.php?z=1861132\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Andi P&auml;tzold\n          </a>\n        </footer>\n      </Container>\n    </>\n  );\n}\n\nfunction toSeconds(ms) {\n  return Math.round(ms / 1_000);\n}\n","import { useEffect, useState } from \"react\";\n\nexport function useVoices() {\n  const [voices, setVoices] = useState([]);\n\n  const updateVoices = () => {\n    setVoices(window.speechSynthesis.getVoices());\n  };\n\n  useEffect(() => {\n    if (typeof window.speechSynthesis === \"undefined\") {\n      return;\n    }\n\n    updateVoices();\n    window.speechSynthesis.onvoiceschanged = updateVoices;\n    return () => (window.speechSynthesis.onvoiceschanged = undefined);\n  }, []);\n\n  return voices.filter((voice) => voice.lang.startsWith(\"en-\"));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}