{"version":3,"sources":["common/constants.tsx","common/config.tsx","common/speech.tsx","common/util.tsx","hooks/useWakeLock.tsx","components/CopyButton.tsx","components/AthletesSettings.tsx","assets/discord.svg","assets/discordMark.svg","components/DiscordBot.tsx","components/Footer.tsx","components/Header.tsx","components/App.tsx","index.tsx"],"names":["DEFAULT_ATHLETE_NAMES","LOCAL_STORAGE_KEY","DEFAULT_ATHLETES","slice","map","athleteName","text","enabled","time","voiceCommands","nextAthlete","started","speakCommand","command","args","msg","SpeechSynthesisUtterance","lang","window","speechSynthesis","cancel","speak","toSeconds","ms","Math","round","secondsToString","fullTimeInSeconds","minutes","floor","seconds","toString","padStart","isSupported","navigator","CopyButton","useState","copied","setCopied","copiedTimeout","useRef","undefined","OverlayTrigger","placement","overlay","Tooltip","id","Button","variant","size","className","onClick","clipboard","writeText","current","clearTimeout","setTimeout","icon","faCopy","AthletesSettings","athletes","onChange","state","discordCommand","athlete","trim","replaceAll","join","getBackgroundColor","athleteIndex","Form","Group","as","Row","controlId","Col","sm","InputGroup","Control","style","background","type","placeholder","value","e","a","ai","target","min","step","Append","ButtonGroup","toggle","ToggleButton","name","checked","disabled","filter","length","faSkullCrossbones","_","faTrash","block","faPlus","DiscordBot","Alert","Heading","Badge","pill","xs","md","src","discordLogo","alt","discordMarkLogo","rel","href","Footer","faPaypal","faGithub","Header","Navbar","bg","Brand","faBiking","initialConfig","rawConfig","localStorage","getItem","config","JSON","parse","speechEnabled","startDelay","loadConfig","App","setState","useFullScreenHandle","fullscreenRef","node","fullscreenActive","active","enterFullscreen","enter","leaveFullscreen","exit","wakelockRef","useEffect","release","request","document","visibilityState","wakeLock","addEventListener","removeEventListener","useWakeLock","setStartDelay","setSpeechEnabled","setAthletes","getAthleteName","timeUntilNextChange","setTimeUntilNextChange","currentAthlete","setCurrentAthlete","setItem","stringify","useMemo","athletesWithIndex","index","find","startTimeRef","prevTimeRef","pauseTimeRef","changeToNextAthlete","now","Date","useInterval","changeTime","secondsSinceStart","max","Container","Jumbotron","ref","faArrowRight","faClock","ProgressBar","transform","faStop","faPlay","faPause","faForward","right","bottom","faVolumeUp","faVolumeMute","faCompress","faExpand","maxWidth","Card","Body","Label","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.857ff14c.chunk.js","sourcesContent":["export const DEFAULT_ATHLETE_NAMES = [\"Amelia\", \"Bowie\", \"Coco\", \"Dan\", \"Emma\", \"Finn\", \"Grace\", \"Henry\", \"Irene\", \"Jack\"];\n\nexport const DEFAULT_START_DELAY = 0;\nexport const DEFAULT_TIME_PER_ATHLETE = 30;\nexport const DEFAULT_SPEECH_ENABLED = true;\n","import { Athlete } from \"../types\";\nimport { DEFAULT_ATHLETE_NAMES, DEFAULT_SPEECH_ENABLED, DEFAULT_START_DELAY, DEFAULT_TIME_PER_ATHLETE } from \"./constants\";\n\ninterface Config {\n    athletes: Athlete[];\n    speechEnabled: boolean;\n    startDelay: number;\n}\n\nconst LOCAL_STORAGE_KEY = \"config\";\n\nconst DEFAULT_ATHLETES = DEFAULT_ATHLETE_NAMES.slice(0, 6).map((athleteName) => ({\n    text: athleteName,\n    enabled: true,\n    time: DEFAULT_TIME_PER_ATHLETE,\n}));\n\nexport function loadConfig() {\n    try {\n        const rawConfig = localStorage.getItem(LOCAL_STORAGE_KEY) ?? \"{}\";\n        const config: Partial<Config> = JSON.parse(rawConfig);\n\n        return {\n            athletes: config.athletes ?? DEFAULT_ATHLETES,\n            speechEnabled: config.speechEnabled ?? DEFAULT_SPEECH_ENABLED,\n            startDelay: config.startDelay ?? DEFAULT_START_DELAY,\n        };\n    } catch {\n        return {\n            athletes: DEFAULT_ATHLETES,\n            speechEnabled: DEFAULT_SPEECH_ENABLED,\n            startDelay: DEFAULT_START_DELAY,\n        };\n    }\n}\n\nexport function saveConfig(config: Config) {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(config));\n}\n","interface Args {\n    nextAthlete: string;\n    started: boolean;\n}\n\nconst voiceCommands: Record<string, (args: Args) => string> = {\n    [10 * 60]: () => \"10 minutes\",\n    [5 * 60]: () => \"5 minutes\",\n    [3 * 60]: () => \"3 minutes\",\n    [2 * 60]: () => \"2 minutes\",\n    [1 * 60]: () => \"1 minute\",\n    30: () => \"30 seconds\",\n    15: ({ nextAthlete }) => `${nextAthlete}. Get ready.`,\n    10: ({ started }) => (started ? \"Change in 10\" : \"Start in 10\"),\n    5: () => \"Five\",\n    2: () => \"Two\",\n    1: () => \"One\",\n    0: ({ nextAthlete, started }) => (started ? `Change to ${nextAthlete}` : \"Let's go\"),\n};\n\nexport function speakCommand(command: string, args: Args) {\n    if (voiceCommands[command]) {\n        speak(voiceCommands[command](args));\n    }\n}\n\nexport function speak(text: string) {\n    const msg = new SpeechSynthesisUtterance();\n    msg.text = text;\n    msg.lang = \"en-US\";\n\n    window.speechSynthesis.cancel();\n    window.speechSynthesis.speak(msg);\n}\n","export function toSeconds(ms: number): number {\n    return Math.round(ms / 1_000);\n}\n\nexport function secondsToString(fullTimeInSeconds: number) {\n    const minutes = Math.floor(fullTimeInSeconds / 60);\n    const seconds = fullTimeInSeconds - minutes * 60;\n\n    if (minutes === 0) {\n        return `${seconds}s`\n    }\n\n    return `${minutes}:${seconds.toString().padStart(2, \"0\")}min`;\n}\n","import { useEffect, useRef } from \"react\";\n\nconst isSupported = \"wakeLock\" in navigator;\n\nexport function useWakeLock(active: boolean) {\n    const wakelockRef = useRef<WakeLock | null>(null);\n\n    useEffect(() => {\n        if (!isSupported) {\n            return;\n        }\n\n        if (!active) {\n            return;\n        }\n\n        const release = async () => {\n            await wakelockRef.current?.release();\n            wakelockRef.current = null;\n        };\n\n        const request = async () => {\n            if (document.visibilityState !== \"visible\") {\n                return;\n            }\n\n            try {\n                await release();\n                wakelockRef.current = await navigator.wakeLock.request(\"screen\");\n            } catch {}\n        };\n\n        request();\n        document.addEventListener(\"visibilitychange\", request);\n\n        return () => {\n            release();\n            document.removeEventListener(\"visibilitychange\", request);\n        };\n    }, [active]);\n}\n","import { faCopy } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useRef, useState } from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\ninterface Props {\n    command: string;\n}\n\nexport function CopyButton({ command }: Props) {\n    const [copied, setCopied] = useState(false);\n    const copiedTimeout = useRef<number | undefined>(undefined);\n\n    const copyCommand = () => {\n        navigator.clipboard.writeText(command);\n\n        if (copiedTimeout.current) {\n            clearTimeout(copiedTimeout.current);\n            copiedTimeout.current = undefined;\n        }\n        setCopied(true);\n        copiedTimeout.current = (setTimeout(() => setCopied(false), 5_000) as unknown) as number;\n    };\n\n    return (\n        <OverlayTrigger\n            placement=\"right\"\n            overlay={<Tooltip id=\"tooltip-copy-athletes\">{copied ? \"Copied!\" : \"Copy Discord Bot command\"}</Tooltip>}\n        >\n            <Button variant=\"outline-link\" size=\"sm\" className=\"m-0 p-0 border-0\" onClick={copyCommand}>\n                <FontAwesomeIcon icon={faCopy} />\n            </Button>\n        </OverlayTrigger>\n    );\n}\n","import { faSkullCrossbones, faTrash, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Button, ButtonGroup, Col, Form, InputGroup, Row, ToggleButton } from \"react-bootstrap\";\nimport { DEFAULT_ATHLETE_NAMES, DEFAULT_TIME_PER_ATHLETE } from \"../common/constants\";\nimport { Athlete, State } from \"../types\";\nimport { CopyButton } from \"./CopyButton\";\n\ninterface Props {\n    athletes: Athlete[];\n    onChange: (athletes: Athlete[]) => void;\n    state: State;\n}\n\nexport function AthletesSettings({ athletes, onChange, state }: Props) {\n    const discordCommand = `!t config athletes ${athletes\n        .map((athlete) => `${athlete.text.trim().replaceAll(\" \", \"_\").replaceAll(\" \", \"_\")}:${athlete.time}`)\n        .join(\" \")}`;\n\n    const getBackgroundColor = (athleteIndex: number) => {\n        if (state === \"stopped\") {\n            return \"#fff\";\n        }\n\n        if (!athletes[athleteIndex].enabled) {\n            return \"#6c757d80\";\n        }\n\n        return \"#fff\";\n    };\n\n    return (\n        <>\n            <h2 className=\"mb-3\">\n                Athletes <CopyButton command={discordCommand} />\n            </h2>\n\n            {athletes.map((athlete, athleteIndex) => (\n                <Form.Group key={athleteIndex} as={Row} controlId={`athlete-${athleteIndex}`}>\n                    <Col sm={12}>\n                        <InputGroup>\n                            <Form.Control\n                                style={{ background: getBackgroundColor(athleteIndex) }}\n                                type=\"text\"\n                                placeholder=\"Name\"\n                                value={athlete.text}\n                                onChange={(e) =>\n                                    onChange(\n                                        athletes.map((a, ai) => (ai === athleteIndex ? { ...a, text: e.target.value } : a))\n                                    )\n                                }\n                            />\n                            <Form.Control\n                                style={{ background: getBackgroundColor(athleteIndex) }}\n                                type=\"number\"\n                                placeholder=\"Time (in seconds)\"\n                                min={5}\n                                step={5}\n                                value={athlete.time}\n                                onChange={(e) =>\n                                    onChange(\n                                        athletes.map((a, ai) => (ai === athleteIndex ? { ...a, time: +e.target.value } : a))\n                                    )\n                                }\n                            />\n                            <InputGroup.Append>\n                                <ButtonGroup toggle>\n                                    {state !== \"stopped\" && (\n                                        <ToggleButton\n                                            variant=\"outline-secondary\"\n                                            type=\"checkbox\"\n                                            name={`athlete-${athleteIndex}-enabled`}\n                                            checked={!athlete.enabled}\n                                            disabled={athlete.enabled && athletes.filter((a) => a.enabled).length === 1}\n                                            value={athlete.text}\n                                            onChange={(e) =>\n                                                onChange(\n                                                    athletes.map((a, ai) =>\n                                                        ai === athleteIndex ? { ...a, enabled: !e.target.checked } : a\n                                                    )\n                                                )\n                                            }\n                                        >\n                                            <FontAwesomeIcon icon={faSkullCrossbones} />\n                                        </ToggleButton>\n                                    )}\n                                    {state === \"stopped\" && (\n                                        <Button\n                                            variant=\"danger\"\n                                            disabled={athletes.length === 1}\n                                            onClick={() => onChange(athletes.filter((_, ai) => ai !== athleteIndex))}\n                                        >\n                                            <FontAwesomeIcon icon={faTrash} />\n                                        </Button>\n                                    )}\n                                </ButtonGroup>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Form.Group>\n            ))}\n\n            {state === \"stopped\" && (\n                <Button\n                    variant=\"light\"\n                    block\n                    onClick={() => {\n                        onChange([\n                            ...athletes,\n                            {\n                                text: DEFAULT_ATHLETE_NAMES[athletes.length] ?? \"\",\n                                time: DEFAULT_TIME_PER_ATHLETE,\n                                enabled: true,\n                            },\n                        ]);\n                    }}\n                >\n                    <FontAwesomeIcon icon={faPlus} /> Add athlete\n                </Button>\n            )}\n        </>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/discord.3372aeeb.svg\";","export default __webpack_public_path__ + \"static/media/discordMark.d2c3bfa7.svg\";","import { Alert, Badge, Col, Row } from \"react-bootstrap\";\nimport discordLogo from \"../assets/discord.svg\";\nimport discordMarkLogo from \"../assets/discordMark.svg\";\n\nexport function DiscordBot() {\n    return (\n        <Alert variant=\"info\">\n            <Alert.Heading>\n                Discord Bot{\" \"}\n                <Badge pill variant=\"primary\">\n                    Beta\n                </Badge>\n            </Alert.Heading>\n            <Row>\n                <Col xs={12} sm={4} md={2}>\n                    <img src={discordLogo} alt=\"Discord Logo\" className=\"d-block d-sm-none\" />\n                    <img src={discordMarkLogo} alt=\"Discord Logo\" className=\"d-none d-sm-block\" />\n                </Col>\n                <Col xs={12} sm={8} md={10}>\n                    <p className=\"mt-2\">\n                        No need to run the Web App on a rider's computer and mess around with the audio setup. Just add the\n                        TTT-Timer Discord Bot to your server and type <code>!t help</code> for details on how to use it.\n                        After starting the timer, it will appear as a user within your call and coach you through the race.\n                    </p>\n\n                    <div className=\"d-flex justify-content-end\">\n                        <a\n                            className=\"btn btn-light\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            href=\"https://andipaetzold.github.io/tttt-discord\"\n                        >\n                            Documentation\n                        </a>\n\n                        <a\n                            className=\"btn btn-primary ml-2\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            href=\"https://discord.com/api/oauth2/authorize?client_id=806979974594560060&amp;permissions=3155968&amp;scope=bot\"\n                        >\n                            Install\n                        </a>\n                    </div>\n                </Col>\n            </Row>\n        </Alert>\n    );\n}\n","import { faGithub, faPaypal } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport function Footer() {\n    return (\n        <footer className=\"text-muted mt-4 mb-2 text-center\">\n            <p>\n                <small>\n                    Made with ♥ for{\" \"}\n                    <a href=\"https://www.wtrl.racing\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        WTRL\n                    </a>{\" \"}\n                    by{\" \"}\n                    <a href=\"mailto:tttt@andipaetzold.com\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        Andi P&auml;tzold\n                    </a>\n                </small>\n            </p>\n            <p>\n                <small>\n                    <a href=\"https://paypal.me/andipaetzold\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        <FontAwesomeIcon icon={faPaypal} /> Donate via PayPal\n                    </a>\n                </small>\n            </p>\n            <p>\n                <small>\n                    <a href=\"https://github.com/andipaetzold/tttt\" rel=\"noopener noreferrer\" target=\"_blank\">\n                        <FontAwesomeIcon icon={faGithub} /> GitHub\n                    </a>\n                </small>\n            </p>\n        </footer>\n    );\n}\n","import { faBiking } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Navbar } from \"react-bootstrap\";\n\nexport function Header() {\n    return (\n        <Navbar bg=\"light\" className=\"mb-2\">\n            <Navbar.Brand className=\"mx-auto\">\n                <FontAwesomeIcon icon={faBiking} /> Team Time Trial Timer <FontAwesomeIcon icon={faBiking} />\n            </Navbar.Brand>\n        </Navbar>\n    );\n}\n","import { faClock } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n    faArrowRight,\n    faCompress,\n    faExpand,\n    faForward,\n    faPause,\n    faPlay,\n    faStop,\n    faVolumeMute,\n    faVolumeUp,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport useInterval from \"@use-it/interval\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button, Card, Container, Form, Jumbotron, ProgressBar } from \"react-bootstrap\";\nimport { useFullScreenHandle } from \"react-full-screen\";\nimport { loadConfig, saveConfig } from \"../common/config\";\nimport { speakCommand } from \"../common/speech\";\nimport { secondsToString, toSeconds } from \"../common/util\";\nimport { useWakeLock } from \"../hooks/useWakeLock\";\nimport { State } from \"../types\";\nimport { AthletesSettings } from \"./AthletesSettings\";\nimport { CopyButton } from \"./CopyButton\";\nimport { DiscordBot } from \"./DiscordBot\";\nimport { Footer } from \"./Footer\";\nimport { Header } from \"./Header\";\n\nconst initialConfig = loadConfig();\n\nexport default function App() {\n    const [state, setState] = useState<State>(\"stopped\");\n\n    const {\n        node: fullscreenRef,\n        active: fullscreenActive,\n        enter: enterFullscreen,\n        exit: leaveFullscreen,\n    } = useFullScreenHandle();\n\n    useWakeLock(state === \"running\" || state === \"paused\");\n\n    const [startDelay, setStartDelay] = useState(initialConfig.startDelay);\n    const [speechEnabled, setSpeechEnabled] = useState(initialConfig.speechEnabled);\n    const [athletes, setAthletes] = useState(initialConfig.athletes);\n\n    const getAthleteName = (athleteIndex: number) => {\n        if (athleteIndex === undefined) {\n            return \"\";\n        }\n\n        return athletes[athleteIndex].text || `Athlete ${athleteIndex + 1}`;\n    };\n\n    const [timeUntilNextChange, setTimeUntilNextChange] = useState(0);\n    const [currentAthlete, setCurrentAthlete] = useState<number | undefined>(undefined);\n\n    useEffect(() => {\n        saveConfig({ athletes, startDelay, speechEnabled });\n    }, [athletes, startDelay, speechEnabled]);\n\n    const nextAthlete = useMemo(() => {\n        const athletesWithIndex = athletes.map((a, ai) => ({ ...a, index: ai }));\n\n        if (currentAthlete === undefined) {\n            return athletesWithIndex.find((a) => a.enabled)!.index;\n        }\n\n        return [...athletesWithIndex.slice(currentAthlete + 1), ...athletesWithIndex].filter((a) => a.enabled)[0].index;\n    }, [currentAthlete, athletes]);\n\n    const startTimeRef = useRef<number | undefined>();\n    const prevTimeRef = useRef<number | undefined>();\n    const pauseTimeRef = useRef<number | undefined>();\n\n    const speak = (command: string) => {\n        if (!speechEnabled) {\n            return;\n        }\n        speakCommand(command, {\n            nextAthlete: getAthleteName(nextAthlete),\n            started: currentAthlete !== undefined,\n        });\n    };\n\n    const changeToNextAthlete = () => {\n        setCurrentAthlete(nextAthlete);\n        setTimeUntilNextChange(athletes[nextAthlete].time);\n\n        const now = Date.now();\n        startTimeRef.current = now;\n        if (state === \"paused\") {\n            pauseTimeRef.current = now;\n        }\n    };\n\n    useInterval(() => {\n        if (state !== \"running\") {\n            return;\n        }\n\n        const changeTime = currentAthlete === undefined ? startDelay : athletes[currentAthlete].time;\n\n        const now = Date.now();\n\n        const secondsSinceStart = toSeconds(now - startTimeRef.current!);\n        const prevSecondsSinceStart = toSeconds(prevTimeRef.current! - startTimeRef.current!);\n\n        if (secondsSinceStart !== prevSecondsSinceStart) {\n            speak(Math.max(0, changeTime - secondsSinceStart).toString());\n            if (secondsSinceStart >= changeTime) {\n                changeToNextAthlete();\n            } else {\n                setTimeUntilNextChange(Math.max(changeTime - secondsSinceStart, 0));\n            }\n        }\n\n        prevTimeRef.current = now;\n    }, 500);\n\n    const handleStart = () => {\n        const now = Date.now();\n\n        prevTimeRef.current = now;\n        startTimeRef.current = now;\n\n        setTimeUntilNextChange(startDelay > 0 ? startDelay : athletes[0].time);\n        setCurrentAthlete(startDelay > 0 ? undefined : nextAthlete);\n        setAthletes((athletes) => athletes.map((a) => ({ ...a, enabled: true })));\n\n        setState(\"running\");\n    };\n\n    const handleStop = () => {\n        setState(\"stopped\");\n        setAthletes((athletes) => athletes.map((a) => ({ ...a, enabled: true })));\n    };\n\n    const handlePause = () => {\n        setState(\"paused\");\n        pauseTimeRef.current = Date.now();\n    };\n\n    const handleResume = () => {\n        setState(\"running\");\n        startTimeRef.current = Date.now() - (pauseTimeRef.current! - startTimeRef.current!);\n    };\n\n    return (\n        <>\n            <Header />\n\n            <Container>\n                <Jumbotron\n                    className=\"pt-4 mb-2 position-relative d-flex flex-column align-items-center justify-content-center\"\n                    ref={fullscreenRef}\n                >\n                    {state !== \"stopped\" ? (\n                        <div className=\"w-100\">\n                            <h1 className=\"text-center display-2\">\n                                {currentAthlete === undefined ? \"Wait\" : getAthleteName(currentAthlete)}\n                            </h1>\n\n                            <h2 className=\"text-center display-5\">\n                                <FontAwesomeIcon icon={faArrowRight} /> {getAthleteName(nextAthlete)}\n                            </h2>\n\n                            <h3 className=\"text-center display-6\">\n                                <FontAwesomeIcon icon={faClock} /> {secondsToString(timeUntilNextChange)}\n                            </h3>\n                            <ProgressBar\n                                style={{ transform: \"scaleX(-1)\", background: \"white\" }}\n                                now={timeUntilNextChange}\n                                max={currentAthlete === undefined ? startDelay : athletes[currentAthlete].time}\n                            />\n\n                            <div className=\"mt-4 text-center\">\n                                <Button variant=\"danger\" className=\"mr-1\" onClick={handleStop}>\n                                    <FontAwesomeIcon icon={faStop} /> Stop\n                                </Button>\n                                {state === \"paused\" ? (\n                                    <Button variant=\"info\" className=\"mr-1\" onClick={handleResume}>\n                                        <FontAwesomeIcon icon={faPlay} /> Resume\n                                    </Button>\n                                ) : (\n                                    <Button variant=\"info\" className=\"mr-1\" onClick={handlePause}>\n                                        <FontAwesomeIcon icon={faPause} /> Pause\n                                    </Button>\n                                )}\n\n                                <Button variant=\"warning\" onClick={changeToNextAthlete}>\n                                    <FontAwesomeIcon icon={faForward} /> Skip\n                                </Button>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"text-center\">\n                            <Button variant=\"primary\" onClick={handleStart} size=\"lg\">\n                                <FontAwesomeIcon icon={faPlay} /> Start{\" \"}\n                                {startDelay > 0 && `in ${secondsToString(startDelay)}`}\n                            </Button>\n                        </div>\n                    )}\n\n                    <div className=\"position-absolute\" style={{ right: 16, bottom: 16 }}>\n                        {speechEnabled ? (\n                            <Button size=\"sm\" variant=\"secondary\" onClick={() => setSpeechEnabled(false)}>\n                                <FontAwesomeIcon icon={faVolumeUp} />\n                            </Button>\n                        ) : (\n                            <Button size=\"sm\" variant=\"danger\" onClick={() => setSpeechEnabled(true)}>\n                                <FontAwesomeIcon icon={faVolumeMute} />\n                            </Button>\n                        )}\n\n                        {fullscreenActive ? (\n                            <Button className=\"ml-2\" size=\"sm\" variant=\"danger\" onClick={leaveFullscreen}>\n                                <FontAwesomeIcon icon={faCompress} />\n                            </Button>\n                        ) : (\n                            <Button className=\"ml-2\" size=\"sm\" variant=\"secondary\" onClick={enterFullscreen}>\n                                <FontAwesomeIcon icon={faExpand} />\n                            </Button>\n                        )}\n                    </div>\n\n                    <div className=\"mt-5\" style={{ maxWidth: \"500px\" }}>\n                        <AthletesSettings athletes={athletes} onChange={setAthletes} state={state} />\n                    </div>\n                </Jumbotron>\n\n                <Card className=\"mb-2\">\n                    <Card.Body>\n                        <h3>Settings</h3>\n\n                        <Form.Group controlId=\"startDelay\">\n                            <Form.Label>\n                                Start Delay (in seconds) <CopyButton command={`!t config delay ${startDelay}`} />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                value={startDelay}\n                                onChange={(e) => setStartDelay(+e.target.value)}\n                                min={0}\n                                step={30}\n                                disabled={state !== \"stopped\"}\n                            />\n                        </Form.Group>\n                    </Card.Body>\n                </Card>\n\n                <DiscordBot />\n                <Footer />\n            </Container>\n        </>\n    );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}