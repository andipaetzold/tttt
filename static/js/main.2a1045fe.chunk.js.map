{"version":3,"sources":["speech.js","App.js","index.js"],"names":["voiceCommands","15","nextAthlete","10","5","2","1","0","speakCommand","command","args","text","msg","SpeechSynthesisUtterance","lang","speechSynthesis","speak","App","useState","startTime","setStartTime","running","setRunning","timePerAthlete","setTimePerAthlete","speechEnabled","setSpeechEnabled","timeUntilNextAthlete","setTimeUntilNextAthlete","athletes","setAthletes","currentAthlete","setCurrentAthlete","setNextAthlete","requestRef","useRef","prevTimeRef","useEffect","current","requestAnimationFrame","tick","now","secondsSinceStart","Math","round","newTimeUntilNextAthlete","prevSecondsSinceStart","prevTimeUntilNextAthlete","cur","length","cancelAnimationFrame","Container","Card","className","Body","Button","variant","onClick","performance","map","athlete","athleteIndex","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","placeholder","value","onChange","e","a","ai","target","disabled","min","Check","label","checked","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a1045fe.chunk.js","sourcesContent":["const voiceCommands = {\n  15: ({ nextAthlete }) => `${nextAthlete} bereit machen`,\n  10: () => \"Wechsel in 10\",\n  5: () => \"Fünf\",\n  2: () => \"Zwei\",\n  1: () => \"Eins\",\n  0: ({ nextAthlete }) => `Wechsel auf ${nextAthlete}`,\n};\n\nexport function speakCommand(command, args) {\n  if (voiceCommands[command]) {\n    speak(voiceCommands[command](args));\n  }\n}\n\nexport function speak(text) {\n  const msg = new SpeechSynthesisUtterance();\n  msg.text = text;\n  msg.lang = \"de-DE\";\n\n  speechSynthesis.speak(msg);\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport { Button, Card, Col, Container, Form, Row } from \"react-bootstrap\";\nimport { speakCommand } from \"./speech\";\n\nexport default function App() {\n  const [startTime, setStartTime] = useState(0);\n  const [running, setRunning] = useState(false);\n  const [timePerAthlete, setTimePerAthlete] = useState(30);\n  const [speechEnabled, setSpeechEnabled] = useState(false);\n  const [timeUntilNextAthlete, setTimeUntilNextAthlete] = useState(0);\n  const [athletes, setAthletes] = useState([\n    \"Anton\",\n    \"Berta\",\n    \"Cäsar\",\n    \"Dora\",\n    \"Emil\",\n    \"Friedrich\",\n  ]);\n  const [currentAthlete, setCurrentAthlete] = useState(0);\n  const [nextAthlete, setNextAthlete] = useState(1);\n\n  const requestRef = useRef();\n  const prevTimeRef = useRef();\n\n  useEffect(() => {\n    if (!running) {\n      return;\n    }\n\n    const tick = (now) => {\n      const secondsSinceStart = Math.round((now - startTime) / 1_000);\n      const newTimeUntilNextAthlete =\n        timePerAthlete - (secondsSinceStart % timePerAthlete);\n\n      setTimeUntilNextAthlete(newTimeUntilNextAthlete);\n\n      if (prevTimeRef.current) {\n        const prevSecondsSinceStart = Math.round(\n          (prevTimeRef.current - startTime) / 1_000\n        );\n        const prevTimeUntilNextAthlete =\n          timePerAthlete - (prevSecondsSinceStart % timePerAthlete);\n\n        if (newTimeUntilNextAthlete !== prevTimeUntilNextAthlete) {\n          if (newTimeUntilNextAthlete >= prevTimeUntilNextAthlete) {\n            if (speechEnabled) {\n              speakCommand(0, { nextAthlete: athletes[nextAthlete] });\n            }\n\n            setCurrentAthlete((cur) => (cur + 1) % athletes.length);\n            setNextAthlete((cur) => (cur + 1) % athletes.length);\n          } else if (newTimeUntilNextAthlete > 0) {\n            if (speechEnabled) {\n              speakCommand(newTimeUntilNextAthlete, {\n                nextAthlete: athletes[nextAthlete],\n              });\n            }\n          }\n        }\n      }\n\n      prevTimeRef.current = now;\n      requestRef.current = requestAnimationFrame(tick);\n    };\n\n    requestRef.current = requestAnimationFrame(tick);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, [\n    running,\n    speechEnabled,\n    athletes,\n    nextAthlete,\n    timePerAthlete,\n    startTime,\n  ]);\n\n  const handleStart = () => {\n    setStartTime(performance.now());\n    setCurrentAthlete(0);\n    setNextAthlete(1);\n\n    setRunning(true);\n  };\n\n  const handleStop = () => {\n    setRunning(false);\n  };\n\n  return (\n    <Container>\n      <h1>Team Time Trial Timer</h1>\n\n      <Card className=\"mb-2\">\n        <Card.Body>\n          {running && (\n            <>\n              <h2>\n                {athletes[currentAthlete]} → {athletes[nextAthlete]}\n              </h2>\n              <h3>Wechsel in {timeUntilNextAthlete}s</h3>\n            </>\n          )}\n\n          <div className=\"mt-4\">\n            {running ? (\n              <Button variant=\"secondary\" onClick={handleStop}>\n                Stop\n              </Button>\n            ) : (\n              <Button variant=\"primary\" onClick={handleStart}>\n                Start\n              </Button>\n            )}\n          </div>\n        </Card.Body>\n      </Card>\n\n      <Card>\n        <Card.Body>\n          <h3>Sportler</h3>\n\n          {athletes.map((athlete, athleteIndex) => (\n            <Form.Group\n              key={athleteIndex}\n              as={Row}\n              controlId={`athlete-${athleteIndex}`}\n            >\n              <Form.Label column sm={2}>\n                #{athleteIndex + 1}\n              </Form.Label>\n              <Col sm={10}>\n                <Form.Control\n                  type=\"text\"\n                  placeholder={`Athlete ${athleteIndex}`}\n                  value={athlete}\n                  onChange={(e) =>\n                    setAthletes(\n                      athletes.map((a, ai) =>\n                        ai === athleteIndex ? e.target.value : a\n                      )\n                    )\n                  }\n                />\n              </Col>\n            </Form.Group>\n          ))}\n\n          <h3>Einstellungen</h3>\n          <Form.Group controlId=\"timePerAthlete\">\n            <Form.Label>Interval (in Sekunden)</Form.Label>\n            <Form.Control\n              type=\"number\"\n              value={timePerAthlete}\n              onChange={(e) => setTimePerAthlete(+e.target.value)}\n              disabled={running}\n              min={20}\n            />\n          </Form.Group>\n          <Form.Group controlId=\"speechEnabled\">\n            <Form.Check\n              type=\"checkbox\"\n              label=\"Sprachausgabe\"\n              checked={speechEnabled}\n              onChange={(e) => setSpeechEnabled(e.target.checked)}\n            />\n          </Form.Group>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}